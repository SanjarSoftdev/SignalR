@page "/"
@using BlazorMultiplayerGame.Shared.Hubs
@using BlazorMultiplayerGame.Shared.Models
@using System.Numerics
@inject NavigationManager Navigation
@inject IJSRuntime JS
@implements IDisposable

<h1>Soccer Game</h1>

@if (!joined)
{
    <div class="join-game">
        <input @bind="playerName" placeholder="Your name" />
        <button @onclick="JoinGame">Join Game</button>
    </div>
}
else if (!gameStarted)
{
    <div class="waiting-message">
        <p>Waiting for opponent to join...</p>
    </div>
}
else
{
    <div class="game-container">
        <div class="score-board">
            @foreach (var player in players.Values)
            {
                <div class="score-item @(player.Id == myId ? "my-score" : "opponent-score")">
                    <span class="player-name">@player.Name</span>
                    <span class="score">@player.Score</span>
                </div>
            }
        </div>

        <div class="field-container">
            <div class="soccer-field" @onkeydown="HandleKeyDown" tabindex="0">
                <!-- Field markings -->
                <div class="center-circle"></div>
                <div class="center-line"></div>
                <div class="left-goal"></div>
                <div class="right-goal"></div>

                <!-- Players -->
                @foreach (var player in players.Values)
                {
                    var x = (player.Position.X / fieldWidth) * 100;
                    var y = (player.Position.Y / fieldHeight) * 100;
                    <div class="player @(player.Side == PlayerSide.Left ? "left-player" : "right-player")"
                         style="left: @(x)%; top: @(y)%">
                        @player.Name.Substring(0, 1)
                    </div>
                }

                <!-- Ball -->
                @if (gameState?.Ball != null)
                {
                    var ballX = (gameState.Ball.Position.X / fieldWidth) * 100;
                    var ballY = (gameState.Ball.Position.Y / fieldHeight) * 100;
                    <div class="ball" style="left: @(ballX)%; top: @(ballY)%"></div>
                }
            </div>
        </div>

        @if (gameState?.Winner != null)
        {
            <div class="game-over">
                <h2>Game Over!</h2>
                <p>@(players[gameState.Winner].Name) wins!</p>
                <button @onclick="ResetGame">Play Again</button>
            </div>
        }
    </div>
}

@code {
    private HubConnection hubConnection;
    private string playerName = "Player" + Random.Shared.Next(1000);
    private bool joined = false;
    private bool gameStarted = false;
    private string myId;
    private Dictionary<string, Player> players = new();
    private GameState gameState;
    private const float fieldWidth = 20f;
    private const float fieldHeight = 10f;
    private System.Threading.Timer gameLoopTimer;

    protected override async Task OnInitializedAsync()
    {
        var hubConnectionBuilder = new HubConnectionBuilder();
        hubConnectionBuilder.WithUrl(Navigation.ToAbsoluteUri("/gamehub"));
        hubConnection = hubConnectionBuilder.Build();

        hubConnection.On<Player>("PlayerJoined", (player) =>
        {
            players[player.Id] = player;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Player>("PlayerMoved", (player) =>
        {
            players[player.Id] = player;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("PlayerLeft", (playerId) =>
        {
            players.Remove(playerId);
            gameStarted = false;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<GameState>("GameStarted", (state) =>
        {
            gameState = state;
            gameStarted = true;
            StartGameLoop();
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<GameState>("GameStateUpdated", (state) =>
        {
            gameState = state;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Player>("GoalScored", (player) =>
        {
            players[player.Id] = player;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<GameState>("GameOver", (state) =>
        {
            gameState = state;
            StopGameLoop();
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("GameFull", () =>
        {
            // Handle game full scenario
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("WaitingForOpponent", () =>
        {
            // Handle waiting for opponent
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task JoinGame()
    {
        await hubConnection.SendAsync("JoinGame", playerName);
        joined = true;
        myId = hubConnection.ConnectionId;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (!gameStarted || gameState?.Winner != null)
            return;

        var direction = Vector2.Zero;
        switch (e.Key)
        {
            case "ArrowUp":
                direction.Y = -1;
                break;
            case "ArrowDown":
                direction.Y = 1;
                break;
            case "ArrowLeft":
                direction.X = -1;
                break;
            case "ArrowRight":
                direction.X = 1;
                break;
        }

        if (direction != Vector2.Zero)
        {
            await hubConnection.SendAsync("MovePlayer", direction);
        }
    }

    private void StartGameLoop()
    {
        gameLoopTimer = new System.Threading.Timer(async _ =>
        {
            await hubConnection.SendAsync("UpdateGameState");
        }, null, 0, 16); // ~60 FPS
    }

    private void StopGameLoop()
    {
        gameLoopTimer?.Dispose();
        gameLoopTimer = null;
    }

    private async Task ResetGame()
    {
        if (gameState != null)
        {
            gameState.Winner = null;
            foreach (var player in players.Values)
            {
                player.Score = 0;
            }
            await hubConnection.SendAsync("ResetGame");
        }
    }

    public void Dispose()
    {
        StopGameLoop();
        _ = hubConnection.DisposeAsync();
    }
}

<style>
    .join-game {
        display: flex;
        gap: 10px;
        margin: 20px 0;
    }

    .waiting-message {
        text-align: center;
        margin: 20px 0;
        font-size: 1.2em;
    }

    .game-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
    }

    .score-board {
        display: flex;
        gap: 40px;
        font-size: 1.5em;
        margin-bottom: 20px;
    }

    .score-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 10px 20px;
        border-radius: 8px;
    }

    .my-score {
        background-color: #e3f2fd;
    }

    .opponent-score {
        background-color: #fff3e0;
    }

    .field-container {
        position: relative;
        width: 800px;
        height: 400px;
        border: 2px solid #333;
        background-color: #4caf50;
    }

    .soccer-field {
        position: relative;
        width: 100%;
        height: 100%;
        outline: none;
    }

    .center-circle {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        width: 100px;
        height: 100px;
        border: 2px solid white;
        border-radius: 50%;
    }

    .center-line {
        position: absolute;
        left: 50%;
        top: 0;
        width: 2px;
        height: 100%;
        background-color: white;
    }

    .left-goal, .right-goal {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 20px;
        height: 120px;
        background-color: white;
    }

    .left-goal {
        left: 0;
    }

    .right-goal {
        right: 0;
    }

    .player {
        position: absolute;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        transform: translate(-50%, -50%);
    }

    .left-player {
        background-color: #2196f3;
    }

    .right-player {
        background-color: #f44336;
    }

    .ball {
        position: absolute;
        width: 20px;
        height: 20px;
        background-color: white;
        border-radius: 50%;
        transform: translate(-50%, -50%);
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .game-over {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(255,255,255,0.9);
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .game-over button {
        margin-top: 10px;
        padding: 8px 16px;
        background-color: #4caf50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .game-over button:hover {
        background-color: #45a049;
    }
</style>