@page "/"
@using BlazorMultiplayerGame.Shared.Hubs
@using BlazorMultiplayerGame.Shared.Models
@using System.Numerics
@inject NavigationManager Navigation
@inject IJSRuntime JS
@implements IDisposable

<div class="mobile-container">
    <h1>Soccer Game</h1>

    @if (!joined)
    {
        <div class="join-game">
            <input @bind="playerName" placeholder="Your name" />
            <button @onclick="JoinGame" class="btn-primary">Join Game</button>
        </div>
    }
    else if (!gameStarted)
    {
        <div class="waiting-message">
            <p>Waiting for opponent to join...</p>
        </div>
    }
    else
    {
        <div class="game-container">
            <div class="score-board">
                @foreach (var player in players.Values)
                {
                    <div class="score-item @(player.Id == myId ? "my-score" : "opponent-score")">
                        <span class="player-name">@player.Name</span>
                        <span class="score">@player.Score</span>
                    </div>
                }
            </div>

            <div class="field-container">
                <div class="soccer-field" 
                     @onkeydown="HandleKeyDown" 
                     @ontouchstart="HandleTouchStart"
                     @ontouchmove="HandleTouchMove"
                     @ontouchend="HandleTouchEnd"
                     tabindex="0">
                    <!-- Field markings -->
                    <div class="center-circle"></div>
                    <div class="center-line"></div>
                    <div class="top-goal"></div>
                    <div class="bottom-goal"></div>

                    <!-- Players -->
                    @foreach (var player in players.Values)
                    {
                        var x = (player.Position.X / fieldWidth) * 100;
                        var y = (player.Position.Y / fieldHeight) * 100;
                        <div class="player @(player.Side == PlayerSide.Left ? "left-player" : "right-player")"
                             style="left: @(x)%; top: @(y)%">
                            <span class="player-sticker">@(player.Side == PlayerSide.Left ? "😁" : "😎")</span>
                        </div>
                    }

                    <!-- Ball -->
                    @if (gameState?.Ball != null)
                    {
                        var ballX = (gameState.Ball.Position.X / fieldWidth) * 100;
                        var ballY = (gameState.Ball.Position.Y / fieldHeight) * 100;
                        <div class="ball" style="left: @(ballX)%; top: @(ballY)%">
                            <span class="ball-sticker">⚽</span>
                        </div>
                    }
                </div>
            </div>

            <!-- Mobile Controls -->
            <div class="mobile-controls">
                <div class="control-pad">
                    <button @ontouchstart="() => HandleDirectionTouch(new Vector2(-1, 0))" 
                            @ontouchend="() => HandleDirectionTouch(Vector2.Zero)"
                            class="control-btn left">←</button>
                    <button @ontouchstart="() => HandleDirectionTouch(new Vector2(0, -1))" 
                            @ontouchend="() => HandleDirectionTouch(Vector2.Zero)"
                            class="control-btn up">↑</button>
                    <button @ontouchstart="() => HandleDirectionTouch(new Vector2(0, 1))" 
                            @ontouchend="() => HandleDirectionTouch(Vector2.Zero)"
                            class="control-btn down">↓</button>
                    <button @ontouchstart="() => HandleDirectionTouch(new Vector2(1, 0))" 
                            @ontouchend="() => HandleDirectionTouch(Vector2.Zero)"
                            class="control-btn right">→</button>
                </div>
            </div>

            @if (gameState?.Winner != null)
            {
                <div class="game-over">
                    <h2>Game Over!</h2>
                    <p>@(players[gameState.Winner].Name) wins!</p>
                    <button @onclick="ResetGame" class="btn-primary">Play Again</button>
                </div>
            }
        </div>
    }
</div>

@code {
    private HubConnection hubConnection;
    private string playerName = "Player" + Random.Shared.Next(1000);
    private bool joined = false;
    private bool gameStarted = false;
    private string myId;
    private Dictionary<string, Player> players = new();
    private GameState gameState;
    private const float fieldWidth = 10f;
    private const float fieldHeight = 20f;
    private System.Threading.Timer gameLoopTimer;
    private Vector2 currentDirection = Vector2.Zero;
    private TouchPoint? touchStart;

    protected override async Task OnInitializedAsync()
    {
        var hubConnectionBuilder = new HubConnectionBuilder();
        hubConnectionBuilder.WithUrl(Navigation.ToAbsoluteUri("/gamehub"));
        hubConnection = hubConnectionBuilder.Build();

        hubConnection.On<Player>("PlayerJoined", (player) =>
        {
            players[player.Id] = player;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Player>("PlayerMoved", (player) =>
        {
            players[player.Id] = player;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("PlayerLeft", (playerId) =>
        {
            players.Remove(playerId);
            gameStarted = false;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<GameState>("GameStarted", (state) =>
        {
            gameState = state;
            gameStarted = true;
            StartGameLoop();
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<GameState>("GameStateUpdated", (state) =>
        {
            gameState = state;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Player>("GoalScored", (player) =>
        {
            players[player.Id] = player;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<GameState>("GameOver", (state) =>
        {
            gameState = state;
            StopGameLoop();
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("GameFull", () =>
        {
            // Handle game full scenario
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("WaitingForOpponent", () =>
        {
            // Handle waiting for opponent
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (!gameStarted || gameState?.Winner != null)
            return;

        var direction = currentDirection;

        switch (e.Key)
        {
            case "ArrowUp":
                direction.Y = -1;
                break;
            case "ArrowDown":
                direction.Y = 1;
                break;
            case "ArrowLeft":
                direction.X = -1;
                break;
            case "ArrowRight":
                direction.X = 1;
                break;
            case " ":
            case "Spacebar":
                break;
        }

        if (direction != currentDirection)
        {
            currentDirection = direction;
            await MovePlayer(direction);
        }
    }

    private async Task HandleDirectionTouch(Vector2 direction)
    {
        if (!gameStarted || gameState?.Winner != null)
            return;

        currentDirection = direction;
        await MovePlayer(direction);
    }

    private async Task HandleTouchStart(TouchEventArgs e)
    {
        if (e.Touches.Any())
        {
            touchStart = e.Touches.First();
        }
    }

    private async Task HandleTouchMove(TouchEventArgs e)
    {
        if (!gameStarted || gameState?.Winner != null || touchStart == null || !e.Touches.Any())
            return;

        var touch = e.Touches.First();
        var deltaX = touch.ClientX - touchStart.ClientX;
        var deltaY = touch.ClientY - touchStart.ClientY;

        // Deadzone to prevent tiny movements
        if (Math.Abs(deltaX) < 10 && Math.Abs(deltaY) < 10)
        {
            await MovePlayer(Vector2.Zero);
            return;
        }

        // Normalize the direction vector
        var length = Math.Sqrt(deltaX * deltaX + deltaY * deltaY);
        if (length > 0)
        {
            var direction = new Vector2(
                (float)(deltaX / length),
                (float)(deltaY / length)
            );
            await MovePlayer(direction);
        }
    }

    private void HandleTouchEnd(TouchEventArgs e)
    {
        touchStart = null;
        currentDirection = Vector2.Zero;
    }

    private async Task MovePlayer(Vector2 direction)
    {
        if (direction != Vector2.Zero)
        {
            await hubConnection.SendAsync("MovePlayer", direction);
        }
    }

    private void StartGameLoop()
    {
        gameLoopTimer?.Dispose();
        gameLoopTimer = new System.Threading.Timer(async _ =>
        {
            if (currentDirection != Vector2.Zero)
            {
                await MovePlayer(currentDirection);
            }
            await hubConnection.SendAsync("UpdateGameState");
        }, null, 0, 16); // ~60 FPS
    }

    private void StopGameLoop()
    {
        gameLoopTimer?.Dispose();
        gameLoopTimer = null;
    }

    private async Task ResetGame()
    {
        if (gameState != null)
        {
            gameState.Winner = null;
            foreach (var player in players.Values)
            {
                player.Score = 0;
            }
            await hubConnection.SendAsync("ResetGame");
        }
    }

    private async Task JoinGame()
    {
        await hubConnection.SendAsync("JoinGame", playerName);
        joined = true;
        myId = hubConnection.ConnectionId;
    }

    public void Dispose()
    {
        StopGameLoop();
        _ = hubConnection.DisposeAsync();
    }
}

<style>
    .mobile-container {
        max-width: 100%;
        padding: 10px;
        margin: 0 auto;
    }

    h1 {
        text-align: center;
        font-size: 1.5rem;
        margin: 10px 0;
    }

    .join-game {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin: 20px 0;
        padding: 0 20px;
    }

    .join-game input {
        padding: 10px;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn-primary {
        background-color: #2196f3;
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
    }

    .btn-primary:hover {
        background-color: #1976d2;
    }

    .waiting-message {
        text-align: center;
        margin: 20px 0;
        font-size: 1.2rem;
        padding: 20px;
        background-color: #f5f5f5;
        border-radius: 8px;
    }

    .game-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 15px;
        width: 100%;
    }

    .score-board {
        display: flex;
        justify-content: space-around;
        width: 100%;
        padding: 10px;
        background-color: #f5f5f5;
        border-radius: 8px;
    }

    .score-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 10px;
        border-radius: 8px;
        min-width: 100px;
    }

    .my-score {
        background-color: #e3f2fd;
    }

    .opponent-score {
        background-color: #fff3e0;
    }

    .field-container {
        position: relative;
        width: 100%;
        max-width: 300px;
        aspect-ratio: 1/2;
        border: 2px solid #333;
        background-color: #4caf50;
        border-radius: 8px;
        overflow: hidden;
        margin: 0 auto;
    }

    .soccer-field {
        position: relative;
        width: 100%;
        height: 100%;
        outline: none;
        touch-action: none;
    }

    .center-circle {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        width: 30%;
        aspect-ratio: 1/1;
        border: 2px solid white;
        border-radius: 50%;
    }

    .center-line {
        position: absolute;
        left: 50%;
        top: 0;
        width: 2px;
        height: 100%;
        background-color: white;
    }

    .top-goal, .bottom-goal {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 4%;
        height: 30%;
        background-color: white;
    }

    .top-goal {
        left: 0;
    }

    .bottom-goal {
        right: 0;
    }

    .player {
        position: absolute;
        width: 12%;  /* Slightly smaller for better visibility */
        aspect-ratio: 1/1;
        transform: translate(-50%, -50%);
        z-index: 2;
        display: flex;
        align-items: center;
        justify-content: center;
        pointer-events: none; /* Prevent player from blocking touch events */
    }

    .player-sticker {
        font-size: 2rem;  /* Slightly smaller font size */
        line-height: 1;
        filter: drop-shadow(0 2px 2px rgba(0,0,0,0.3));
    }

    .left-player {
        filter: none;
    }

    .right-player {
        filter: none;
    }

    .ball {
        position: absolute;
        width: 8%;
        aspect-ratio: 1/1;
        transform: translate(-50%, -50%);
        z-index: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        pointer-events: none; /* Prevent ball from blocking touch events */
    }

    .ball-sticker {
        font-size: 1.5rem;
        line-height: 1;
        filter: drop-shadow(0 2px 2px rgba(0,0,0,0.3));
    }

    .mobile-controls {
        width: 100%;
        max-width: 200px;
        margin: 20px auto;
    }

    .control-pad {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: repeat(3, 1fr);
        gap: 5px;
        aspect-ratio: 1/1;
        background-color: rgba(0, 0, 0, 0.1);
        padding: 10px;
        border-radius: 12px;
        max-width: 150px; /* Smaller control pad */
        margin: 0 auto;
    }

    .control-btn {
        background-color: rgba(255, 255, 255, 0.3);
        border: 2px solid rgba(255, 255, 255, 0.5);
        border-radius: 8px;
        color: white;
        font-size: 1.2rem; /* Smaller font size */
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        aspect-ratio: 1/1;
        min-width: 40px; /* Minimum size for touch targets */
        min-height: 40px;
    }

    .control-btn:active {
        background-color: rgba(255, 255, 255, 0.5);
        transform: scale(0.95);
    }

    .up { grid-column: 2; grid-row: 1; }
    .left { grid-column: 1; grid-row: 2; }
    .down { grid-column: 2; grid-row: 3; }
    .right { grid-column: 3; grid-row: 2; }

    .game-over {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(255,255,255,0.95);
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        z-index: 1000;
        width: 80%;
        max-width: 300px;
    }

    .game-over h2 {
        margin: 0 0 10px 0;
        color: #333;
    }

    .game-over p {
        margin: 0 0 20px 0;
        color: #666;
    }

    @@media screen and (min-width: 768px) {
        .mobile-container {
            max-width: 600px;
        }

        .field-container {
            max-width: 400px;
        }

        .mobile-controls {
            display: none;
        }
    }

    @@media screen and (max-width: 767px) {
        .soccer-field {
            touch-action: none;
        }

        .field-container {
            max-width: 300px;
        }
    }
</style>